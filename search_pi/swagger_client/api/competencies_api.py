# coding: utf-8

"""
    Competence Repository

    The API description of the Competence Repository.  # noqa: E501

    OpenAPI spec version: 0.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CompetenciesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def repository_mgmt_controller_add_competence(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_add_competence  # noqa: E501

        Creates a new competence at the specified repository and returns the created competence.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_add_competence(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompetenceCreationDto body: (required)
        :param str repository_id: (required)
        :return: CompetenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_add_competence_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_add_competence_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_add_competence_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_add_competence  # noqa: E501

        Creates a new competence at the specified repository and returns the created competence.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_add_competence_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompetenceCreationDto body: (required)
        :param str repository_id: (required)
        :return: CompetenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_add_competence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `repository_mgmt_controller_add_competence`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `repository_mgmt_controller_add_competence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryId}/competencies/add_competence', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompetenceDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_add_ueber_competence(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_add_ueber_competence  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_add_ueber_competence(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UeberCompetenceCreationDto body: (required)
        :param str repository_id: (required)
        :return: UnResolvedUeberCompetenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_add_ueber_competence_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_add_ueber_competence_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_add_ueber_competence_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_add_ueber_competence  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_add_ueber_competence_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UeberCompetenceCreationDto body: (required)
        :param str repository_id: (required)
        :return: UnResolvedUeberCompetenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_add_ueber_competence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `repository_mgmt_controller_add_ueber_competence`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `repository_mgmt_controller_add_ueber_competence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryId}/competencies/add_uebercompetence', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnResolvedUeberCompetenceDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_create_repository(self, body, **kwargs):  # noqa: E501
        """repository_mgmt_controller_create_repository  # noqa: E501

        Creates a new competence repository for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_create_repository(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryCreationDto body: (required)
        :return: RepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_create_repository_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_create_repository_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_create_repository_with_http_info(self, body, **kwargs):  # noqa: E501
        """repository_mgmt_controller_create_repository  # noqa: E501

        Creates a new competence repository for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_create_repository_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryCreationDto body: (required)
        :return: RepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_create_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `repository_mgmt_controller_create_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_list_repositories(self, **kwargs):  # noqa: E501
        """repository_mgmt_controller_list_repositories  # noqa: E501

        Lists all repositories of the specified user, without showing its content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_list_repositories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_list_repositories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_list_repositories_with_http_info(**kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_list_repositories_with_http_info(self, **kwargs):  # noqa: E501
        """repository_mgmt_controller_list_repositories  # noqa: E501

        Lists all repositories of the specified user, without showing its content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_list_repositories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_list_repositories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/showOwn', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_load_repository(self, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_load_repository  # noqa: E501

        Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_load_repository(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: UnresolvedRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_load_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_load_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_load_repository_with_http_info(self, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_load_repository  # noqa: E501

        Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_load_repository_with_http_info(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: UnresolvedRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_load_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `repository_mgmt_controller_load_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnresolvedRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_load_resolved_repository(self, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_load_resolved_repository  # noqa: E501

        Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_load_resolved_repository(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: ResolvedRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_load_resolved_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_load_resolved_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_load_resolved_repository_with_http_info(self, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_load_resolved_repository  # noqa: E501

        Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_load_resolved_repository_with_http_info(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: ResolvedRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_load_resolved_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `repository_mgmt_controller_load_resolved_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/resolve/{repositoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResolvedRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_modify(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_modify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_modify(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UeberCompetenceModificationDto body: (required)
        :param str repository_id: (required)
        :return: UnResolvedUeberCompetenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_modify_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_modify_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_modify_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_modify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_modify_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UeberCompetenceModificationDto body: (required)
        :param str repository_id: (required)
        :return: UnResolvedUeberCompetenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_modify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `repository_mgmt_controller_modify`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `repository_mgmt_controller_modify`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryId}/competencies/modify_uebercompetence', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnResolvedUeberCompetenceDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_resolve_to_competencies(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_resolve_to_competencies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_resolve_to_competencies(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UberCompetenceResolveRequestDto body: (required)
        :param str repository_id: (required)
        :return: CompetenceListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_resolve_to_competencies_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_resolve_to_competencies_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_resolve_to_competencies_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """repository_mgmt_controller_resolve_to_competencies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_resolve_to_competencies_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UberCompetenceResolveRequestDto body: (required)
        :param str repository_id: (required)
        :return: CompetenceListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_resolve_to_competencies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `repository_mgmt_controller_resolve_to_competencies`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `repository_mgmt_controller_resolve_to_competencies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryId}/resolveUberCompetencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompetenceListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_mgmt_controller_search_for_repositories(self, **kwargs):  # noqa: E501
        """repository_mgmt_controller_search_for_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_search_for_repositories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_mgmt_controller_search_for_repositories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.repository_mgmt_controller_search_for_repositories_with_http_info(**kwargs)  # noqa: E501
            return data

    def repository_mgmt_controller_search_for_repositories_with_http_info(self, **kwargs):  # noqa: E501
        """repository_mgmt_controller_search_for_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_mgmt_controller_search_for_repositories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_mgmt_controller_search_for_repositories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
