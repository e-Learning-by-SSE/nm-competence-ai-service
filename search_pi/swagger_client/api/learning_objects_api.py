# coding: utf-8

"""
    Competence Repository

    The API description of the Competence Repository.  # noqa: E501

    OpenAPI spec version: 0.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LearningObjectsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def lo_repository_controller_add_goal(self, body, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_add_goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_add_goal(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoGoalCreationDto body: (required)
        :param str repository_id: (required)
        :return: LoGoalDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_add_goal_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_add_goal_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_add_goal_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_add_goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_add_goal_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoGoalCreationDto body: (required)
        :param str repository_id: (required)
        :return: LoGoalDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_add_goal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lo_repository_controller_add_goal`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `lo_repository_controller_add_goal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/{repositoryId}/add_goal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoGoalDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_create_learning_object(self, body, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_create_learning_object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_create_learning_object(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningObjectCreationDto body: (required)
        :param str repository_id: (required)
        :return: LearningObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_create_learning_object_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_create_learning_object_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_create_learning_object_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_create_learning_object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_create_learning_object_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningObjectCreationDto body: (required)
        :param str repository_id: (required)
        :return: LearningObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_create_learning_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lo_repository_controller_create_learning_object`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `lo_repository_controller_create_learning_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/{repositoryId}/add_learning_object', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_create_repository(self, body, **kwargs):  # noqa: E501
        """lo_repository_controller_create_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_create_repository(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoRepositoryCreationDto body: (required)
        :return: ShallowLoRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_create_repository_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_create_repository_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_create_repository_with_http_info(self, body, **kwargs):  # noqa: E501
        """lo_repository_controller_create_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_create_repository_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoRepositoryCreationDto body: (required)
        :return: ShallowLoRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_create_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lo_repository_controller_create_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShallowLoRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_list_repositories(self, **kwargs):  # noqa: E501
        """lo_repository_controller_list_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_list_repositories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_list_repositories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_list_repositories_with_http_info(**kwargs)  # noqa: E501
            return data

    def lo_repository_controller_list_repositories_with_http_info(self, **kwargs):  # noqa: E501
        """lo_repository_controller_list_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_list_repositories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_list_repositories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoRepositoryListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_load_learning_object(self, learning_object_id, **kwargs):  # noqa: E501
        """lo_repository_controller_load_learning_object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_load_learning_object(learning_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_object_id: (required)
        :return: LearningObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_load_learning_object_with_http_info(learning_object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_load_learning_object_with_http_info(learning_object_id, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_load_learning_object_with_http_info(self, learning_object_id, **kwargs):  # noqa: E501
        """lo_repository_controller_load_learning_object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_load_learning_object_with_http_info(learning_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_object_id: (required)
        :return: LearningObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learning_object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_load_learning_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learning_object_id' is set
        if ('learning_object_id' not in params or
                params['learning_object_id'] is None):
            raise ValueError("Missing the required parameter `learning_object_id` when calling `lo_repository_controller_load_learning_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'learning_object_id' in params:
            path_params['learningObjectId'] = params['learning_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/learning_objects/{learningObjectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_load_repository(self, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_load_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_load_repository(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: LoRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_load_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_load_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_load_repository_with_http_info(self, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_load_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_load_repository_with_http_info(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: LoRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_load_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `lo_repository_controller_load_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/{repositoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_modify_learning_object(self, body, repository_id, learning_object_id, **kwargs):  # noqa: E501
        """lo_repository_controller_modify_learning_object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_modify_learning_object(body, repository_id, learning_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningObjectModificationDto body: (required)
        :param str repository_id: (required)
        :param str learning_object_id: (required)
        :return: LearningObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_modify_learning_object_with_http_info(body, repository_id, learning_object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_modify_learning_object_with_http_info(body, repository_id, learning_object_id, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_modify_learning_object_with_http_info(self, body, repository_id, learning_object_id, **kwargs):  # noqa: E501
        """lo_repository_controller_modify_learning_object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_modify_learning_object_with_http_info(body, repository_id, learning_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningObjectModificationDto body: (required)
        :param str repository_id: (required)
        :param str learning_object_id: (required)
        :return: LearningObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id', 'learning_object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_modify_learning_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lo_repository_controller_modify_learning_object`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `lo_repository_controller_modify_learning_object`")  # noqa: E501
        # verify the required parameter 'learning_object_id' is set
        if ('learning_object_id' not in params or
                params['learning_object_id'] is None):
            raise ValueError("Missing the required parameter `learning_object_id` when calling `lo_repository_controller_modify_learning_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501
        if 'learning_object_id' in params:
            path_params['learningObjectId'] = params['learning_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/{repositoryId}/{learningObjectId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_modify_repository(self, body, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_modify_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_modify_repository(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoRepositoryModifyDto body: (required)
        :param str repository_id: (required)
        :return: LoRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_modify_repository_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_modify_repository_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_modify_repository_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """lo_repository_controller_modify_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_modify_repository_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoRepositoryModifyDto body: (required)
        :param str repository_id: (required)
        :return: LoRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_modify_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lo_repository_controller_modify_repository`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `lo_repository_controller_modify_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/{repositoryId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lo_repository_controller_show_goal(self, goal_id, **kwargs):  # noqa: E501
        """lo_repository_controller_show_goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_show_goal(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal_id: (required)
        :return: LoGoalDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lo_repository_controller_show_goal_with_http_info(goal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lo_repository_controller_show_goal_with_http_info(goal_id, **kwargs)  # noqa: E501
            return data

    def lo_repository_controller_show_goal_with_http_info(self, goal_id, **kwargs):  # noqa: E501
        """lo_repository_controller_show_goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lo_repository_controller_show_goal_with_http_info(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal_id: (required)
        :return: LoGoalDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['goal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lo_repository_controller_show_goal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'goal_id' is set
        if ('goal_id' not in params or
                params['goal_id'] is None):
            raise ValueError("Missing the required parameter `goal_id` when calling `lo_repository_controller_show_goal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'goal_id' in params:
            path_params['goalId'] = params['goal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lo_repository/goals/{goalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoGoalDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
