# coding: utf-8

"""
    Competence Repository

    The API description of the Competence Repository.  # noqa: E501

    OpenAPI spec version: 0.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LearningObjectModificationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'required_competencies': 'list[str]',
        'required_ueber_competencies': 'list[str]',
        'offered_competencies': 'list[str]',
        'offered_ueber_competencies': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'required_competencies': 'requiredCompetencies',
        'required_ueber_competencies': 'requiredUeberCompetencies',
        'offered_competencies': 'offeredCompetencies',
        'offered_ueber_competencies': 'offeredUeberCompetencies'
    }

    def __init__(self, name=None, description=None, required_competencies=None, required_ueber_competencies=None, offered_competencies=None, offered_ueber_competencies=None):  # noqa: E501
        """LearningObjectModificationDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._required_competencies = None
        self._required_ueber_competencies = None
        self._offered_competencies = None
        self._offered_ueber_competencies = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if required_competencies is not None:
            self.required_competencies = required_competencies
        if required_ueber_competencies is not None:
            self.required_ueber_competencies = required_ueber_competencies
        if offered_competencies is not None:
            self.offered_competencies = offered_competencies
        if offered_ueber_competencies is not None:
            self.offered_ueber_competencies = offered_ueber_competencies

    @property
    def name(self):
        """Gets the name of this LearningObjectModificationDto.  # noqa: E501


        :return: The name of this LearningObjectModificationDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LearningObjectModificationDto.


        :param name: The name of this LearningObjectModificationDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this LearningObjectModificationDto.  # noqa: E501


        :return: The description of this LearningObjectModificationDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LearningObjectModificationDto.


        :param description: The description of this LearningObjectModificationDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def required_competencies(self):
        """Gets the required_competencies of this LearningObjectModificationDto.  # noqa: E501


        :return: The required_competencies of this LearningObjectModificationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_competencies

    @required_competencies.setter
    def required_competencies(self, required_competencies):
        """Sets the required_competencies of this LearningObjectModificationDto.


        :param required_competencies: The required_competencies of this LearningObjectModificationDto.  # noqa: E501
        :type: list[str]
        """

        self._required_competencies = required_competencies

    @property
    def required_ueber_competencies(self):
        """Gets the required_ueber_competencies of this LearningObjectModificationDto.  # noqa: E501


        :return: The required_ueber_competencies of this LearningObjectModificationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_ueber_competencies

    @required_ueber_competencies.setter
    def required_ueber_competencies(self, required_ueber_competencies):
        """Sets the required_ueber_competencies of this LearningObjectModificationDto.


        :param required_ueber_competencies: The required_ueber_competencies of this LearningObjectModificationDto.  # noqa: E501
        :type: list[str]
        """

        self._required_ueber_competencies = required_ueber_competencies

    @property
    def offered_competencies(self):
        """Gets the offered_competencies of this LearningObjectModificationDto.  # noqa: E501


        :return: The offered_competencies of this LearningObjectModificationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._offered_competencies

    @offered_competencies.setter
    def offered_competencies(self, offered_competencies):
        """Sets the offered_competencies of this LearningObjectModificationDto.


        :param offered_competencies: The offered_competencies of this LearningObjectModificationDto.  # noqa: E501
        :type: list[str]
        """

        self._offered_competencies = offered_competencies

    @property
    def offered_ueber_competencies(self):
        """Gets the offered_ueber_competencies of this LearningObjectModificationDto.  # noqa: E501


        :return: The offered_ueber_competencies of this LearningObjectModificationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._offered_ueber_competencies

    @offered_ueber_competencies.setter
    def offered_ueber_competencies(self, offered_ueber_competencies):
        """Sets the offered_ueber_competencies of this LearningObjectModificationDto.


        :param offered_ueber_competencies: The offered_ueber_competencies of this LearningObjectModificationDto.  # noqa: E501
        :type: list[str]
        """

        self._offered_ueber_competencies = offered_ueber_competencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LearningObjectModificationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LearningObjectModificationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
